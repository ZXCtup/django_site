from django.db import models
from django.contrib.auth import get_user_model
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.urls import reverse

from bot import send_message


class Category(models.Model):
    title = models.CharField(max_length=50, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ", db_index=True)
    slug = models.SlugField(unique=True, verbose_name="–°–ª–∞–≥")

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
        ordering = ["title"]

    def __str__(self):
        return self.title


class Tag(models.Model):
    title = models.CharField(max_length=50, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ", db_index=True)
    slug = models.SlugField(unique=True, verbose_name="–°–ª–∞–≥")

    class Meta:
        verbose_name = "–¢–µ–≥"
        verbose_name_plural = "–¢–µ–≥–∏"
        ordering = ["title"]

    def __str__(self):
        return self.title


class Post(models.Model):
    title = models.CharField(max_length=256, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ", db_index=True)
    slug = models.SlugField(verbose_name="–°–ª–∞–≥", unique=True, default="")
    shot_description = models.TextField(verbose_name="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    full_description = models.TextField(verbose_name="–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    anons_picture = models.ImageField(
        verbose_name="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∞–Ω–æ–Ω—Å–∞", upload_to="posts_image", null=True, blank=True
    )
    body_picture = models.ImageField(
        verbose_name="–ö–∞—Ä—Ç–∏–Ω–∫–∞", upload_to="posts_image", null=True, blank=True
    )
    author = models.ForeignKey(
        get_user_model(),
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–ê–≤—Ç–æ—Ä",
    )
    views = models.IntegerField(verbose_name="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", default=0)
    published_date = models.DateField(auto_now_add=True)
    category = models.ForeignKey(
        to=Category,
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        related_name="posts_by_cat",
        on_delete=models.CASCADE,
    )
    tag = models.ManyToManyField(
        to=Tag, verbose_name="–¢–µ–≥–∏", related_name="posts_by_tag"
    )

    class Meta:
        verbose_name = "–ü–æ—Å—Ç"
        verbose_name_plural = "–ü–æ—Å—Ç—ã"

    def get_absolute_url(self):
        return reverse("post", kwargs={"slug": self.slug})

    def __str__(self):
        return self.title


class Comment(models.Model):
    text = models.TextField(verbose_name="–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    date = models.DateField(verbose_name="–î–∞—Ç–∞", auto_now_add=True)
    author = models.ForeignKey(
        to=get_user_model(),
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="comment_by_user",
        verbose_name="–ê–≤—Ç–æ—Ä",
    )
    post = models.ForeignKey(
        to=Post,
        related_name="comments_by_post",
        on_delete=models.CASCADE,
        verbose_name="–ü–æ—Å—Ç",
    )
    verify = models.BooleanField(default=False, verbose_name="–ü—Ä–æ–≤–µ—Ä–µ–Ω?")
    

    class Meta:
        verbose_name = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        verbose_name_plural = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
        ordering = ["-date"]

    def __str__(self):
        return f"{self.author} - {self.post.title}"


@receiver(post_save, sender=Comment)
def new_comment_create(sender,instance,created, **kwarg):
    if created and instance.verify==False:
        send_message(f'''–ù–æ–≤—ã–π —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! ‚õî

<b>id:</b> {instance.id} ‚öô
                     
<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {instance.author.username} üë®‚Äçüíª

<b>–ù–∞ –ø–æ—Å—Ç:</b> {instance.post.title} ü§ñ

<b>–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:</b>

<code>{instance.text}</code> 

<b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {instance.date} üóì
''',comment_id=instance.id)